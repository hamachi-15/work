//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBBuffer
// {
//
//   float timer;                       // Offset:    0 Size:     4
//   int number;                        // Offset:    4 Size:     4
//   float2 dummy;                      // Offset:    8 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBBuffer                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
switch cb0[0].y
  case l(0)
  ge r0.x, v1.x, l(0.250000)
  and o0.xyz, r0.xxxx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  mov o0.w, l(1.000000)
  ret 
  case l(1)
  ge r0.xy, v1.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
  add r0.zw, -v1.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  ge r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
  and r0.xyzw, r0.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  mul r0.xy, r0.zwzz, r0.xyxx
  add o0.xyz, r0.yyyy, r0.xxxx
  mov o0.w, l(1.000000)
  ret 
  case l(2)
  mul r0.x, cb0[0].x, l(0.020000)
  frc r0.x, r0.x
  add r0.x, r0.x, l(-0.050000)
  mul r0.x, r0.x, l(1.500000)
  add r0.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
  dp2 r0.y, r0.yzyy, r0.yzyy
  sqrt r0.y, r0.y
  ge r0.x, r0.x, r0.y
  movc o0.xyzw, r0.xxxx, l(0,0,0,0), l(0,0,0.500000,1.000000)
  ret 
  case l(3)
  mul r0.x, cb0[0].x, l(0.020000)
  frc r0.x, r0.x
  add r0.x, r0.x, l(0.050000)
  add r0.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
  dp2 r0.y, r0.yzyy, r0.yzyy
  sqrt r0.y, r0.y
  ge r0.x, r0.x, r0.y
  and o0.xyzw, r0.xxxx, l(0, 0, 0x3f000000, 0x3f800000)
  ret 
  case l(4)
  mad r0.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  dp2 r0.x, r0.xyxx, r0.xyxx
  sqrt r0.x, r0.x
  add r0.x, r0.x, l(-0.800000)
  add r0.x, -|r0.x|, l(1.050000)
  ge r0.x, r0.x, l(0.999900)
  and o0.xyz, r0.xxxx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  mov o0.w, l(1.000000)
  ret 
  case l(5)
  mul r0.x, cb0[0].x, l(0.010000)
  frc r0.x, r0.x
  mad r0.yz, v1.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
  dp2 r0.y, r0.yzyy, r0.yzyy
  sqrt r0.y, r0.y
  mad r0.x, -r0.x, l(-20.000000), r0.y
  add r0.x, -r0.x, l(11.000000)
  ge r0.x, r0.x, l(0.999900)
  and o0.xyz, r0.xxxx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  mov o0.w, l(1.000000)
  ret 
  case l(6)
  add r0.xy, v1.yxyy, l(-0.500000, -0.500000, 0.000000, 0.000000)
  min r0.z, |r0.y|, |r0.x|
  max r0.w, |r0.y|, |r0.x|
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  mul r0.z, r0.w, r0.z
  mul r0.w, r0.z, r0.z
  mad r1.x, r0.w, l(0.020835), l(-0.085133)
  mad r1.x, r0.w, r1.x, l(0.180141)
  mad r1.x, r0.w, r1.x, l(-0.330299)
  mad r0.w, r0.w, r1.x, l(0.999866)
  mul r1.x, r0.w, r0.z
  lt r1.y, |r0.y|, |r0.x|
  mad r1.x, r1.x, l(-2.000000), l(1.570796)
  and r1.x, r1.y, r1.x
  mad r0.z, r0.z, r0.w, r1.x
  lt r0.w, r0.y, -r0.y
  and r0.w, r0.w, l(0xc0490fdb)
  add r0.z, r0.w, r0.z
  min r0.w, r0.y, r0.x
  max r0.x, r0.y, r0.x
  lt r0.y, r0.w, -r0.w
  ge r0.x, r0.x, -r0.x
  and r0.x, r0.x, r0.y
  movc r0.x, r0.x, -r0.z, r0.z
  mul r0.x, r0.x, l(8.000000)
  sincos r0.x, null, r0.x
  ge r0.x, r0.x, l(0.750000)
  and o0.xyz, r0.xxxx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  mov o0.w, l(1.000000)
  ret 
  case l(7)
  mul r0.x, cb0[0].x, l(0.010000)
  frc r0.x, r0.x
  add r0.x, -r0.x, l(1.000000)
  mad r0.x, r0.x, l(0.500000), l(0.750000)
  add r0.yz, v1.yyxy, l(0.000000, -0.500000, -0.500000, 0.000000)
  min r0.w, |r0.z|, |r0.y|
  max r1.x, |r0.z|, |r0.y|
  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
  mul r0.w, r0.w, r1.x
  mul r1.x, r0.w, r0.w
  mad r1.y, r1.x, l(0.020835), l(-0.085133)
  mad r1.y, r1.x, r1.y, l(0.180141)
  mad r1.y, r1.x, r1.y, l(-0.330299)
  mad r1.x, r1.x, r1.y, l(0.999866)
  mul r1.y, r0.w, r1.x
  lt r1.z, |r0.z|, |r0.y|
  mad r1.y, r1.y, l(-2.000000), l(1.570796)
  and r1.y, r1.z, r1.y
  mad r0.w, r0.w, r1.x, r1.y
  lt r1.x, r0.z, -r0.z
  and r1.x, r1.x, l(0xc0490fdb)
  add r0.w, r0.w, r1.x
  min r1.x, r0.z, r0.y
  max r0.y, r0.z, r0.y
  lt r0.z, r1.x, -r1.x
  ge r0.y, r0.y, -r0.y
  and r0.y, r0.y, r0.z
  movc r0.y, r0.y, -r0.w, r0.w
  mul r0.y, r0.y, l(8.000000)
  sincos r0.y, null, r0.y
  ge r0.x, r0.y, r0.x
  and o0.xyz, r0.xxxx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  mov o0.w, l(1.000000)
  ret 
  case l(8)
  mul r0.x, cb0[0].x, l(0.016667)
  frc r0.x, r0.x
  add r0.y, r0.x, l(0.050000)
  add r0.zw, r0.yyyx, r0.yyyx
  sincos r0.w, null, r0.w
  mad r0.w, r0.w, l(0.600000), l(0.750000)
  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  dp2 r1.x, r1.xyxx, r1.xyxx
  sqrt r1.x, r1.x
  mad r0.y, -r0.y, l(4.000000), r1.x
  add r0.y, -|r0.y|, l(1.050000)
  ge r0.y, r0.y, l(0.999900)
  add r1.xy, v1.yxyy, l(-0.500000, -0.500000, 0.000000, 0.000000)
  dp2 r1.z, r1.xyxx, r1.xyxx
  sqrt r1.z, r1.z
  ge r0.z, r0.z, r1.z
  min r1.w, |r1.y|, |r1.x|
  max r2.x, |r1.y|, |r1.x|
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
  mul r1.w, r1.w, r2.x
  mul r2.x, r1.w, r1.w
  mad r2.y, r2.x, l(0.020835), l(-0.085133)
  mad r2.y, r2.x, r2.y, l(0.180141)
  mad r2.y, r2.x, r2.y, l(-0.330299)
  mad r2.x, r2.x, r2.y, l(0.999866)
  mul r2.y, r1.w, r2.x
  lt r2.z, |r1.y|, |r1.x|
  mad r2.y, r2.y, l(-2.000000), l(1.570796)
  and r2.y, r2.z, r2.y
  mad r1.w, r1.w, r2.x, r2.y
  lt r2.x, r1.y, -r1.y
  and r2.x, r2.x, l(0xc0490fdb)
  add r1.w, r1.w, r2.x
  min r2.x, r1.y, r1.x
  max r1.x, r1.y, r1.x
  lt r1.y, r2.x, -r2.x
  ge r1.x, r1.x, -r1.x
  and r1.x, r1.x, r1.y
  movc r1.x, r1.x, -r1.w, r1.w
  mad r0.x, r0.x, l(3.140000), r1.x
  mul r0.x, r0.x, l(4.000000)
  sincos r0.x, null, r0.x
  ge r0.x, r0.x, r0.w
  and r0.xyz, r0.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  mad o0.w, r0.z, r0.x, r0.y
  add r0.x, -r1.z, l(0.500000)
  lt r0.x, r0.x, l(0.000000)
  discard_nz r0.x
  mov o0.xyz, l(1.000000,1.000000,1.000000,0)
  ret 
  default 
  break 
endswitch 
mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
ret 
// Approximately 180 instruction slots used
