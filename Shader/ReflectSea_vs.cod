//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 view_projection;// Offset:    0 Size:    64
//   float4x4 view_mat[6];              // Offset:   64 Size:   384 [unused]
//   float4x4 projection;               // Offset:  448 Size:    64 [unused]
//   float4 light_color;                // Offset:  512 Size:    16 [unused]
//   float4 light_direction;            // Offset:  528 Size:    16 [unused]
//   float4 ambient_color;              // Offset:  544 Size:    16 [unused]
//   float4 eye_pos;                    // Offset:  560 Size:    16 [unused]
//   float wave_time;                   // Offset:  576 Size:     4 [unused]
//   float dummy1;                      // Offset:  580 Size:     4 [unused]
//   float dummy2;                      // Offset:  584 Size:     4 [unused]
//   float dummy3;                      // Offset:  588 Size:     4 [unused]
//
// }
//
// cbuffer CbMesh
// {
//
//   row_major float4x4 bone_transforms[128];// Offset:    0 Size:  8192
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
// CbMesh                            cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
// WEIGHTS                  0   xyzw        4     NONE   float   xyzw
// BONES                    0   xyzw        5     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xy          4     NONE   float   xy  
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[512], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   v3.x <- input.Color.x; v3.y <- input.Color.y; v3.z <- input.Color.z; v3.w <- input.Color.w; 
//   v4.x <- input.bone_weights.x; v4.y <- input.bone_weights.y; v4.z <- input.bone_weights.z; v4.w <- input.bone_weights.w; 
//   v5.x <- input.bone_indices.x; v5.y <- input.bone_indices.y; v5.z <- input.bone_indices.z; v5.w <- input.bone_indices.w; 
//   o7.x <- <main return value>.vN.x; o7.y <- <main return value>.vN.y; o7.z <- <main return value>.vN.z; 
//   o6.x <- <main return value>.vB.x; o6.y <- <main return value>.vB.y; o6.z <- <main return value>.vB.z; 
//   o5.x <- <main return value>.vT.x; o5.y <- <main return value>.vT.y; o5.z <- <main return value>.vT.z; 
//   o4.x <- <main return value>.Tex.x; o4.y <- <main return value>.Tex.y; 
//   o3.x <- <main return value>.wPosition.x; o3.y <- <main return value>.wPosition.y; o3.z <- <main return value>.wPosition.z; 
//   o2.x <- <main return value>.wNormal.x; o2.y <- <main return value>.wNormal.y; o2.z <- <main return value>.wNormal.z; 
//   o1.x <- <main return value>.Color.x; o1.y <- <main return value>.Color.y; o1.z <- <main return value>.Color.z; o1.w <- <main return value>.Color.w; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 8 "E:\就職作品\ライブラリ\Game\HLSL\ReflectSea_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z

#line 9
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z

#line 10
mov r0.w, l(0)  // r0.w <- i
mov r2.xyz, r1.xyzx  // r2.x <- n.x; r2.y <- n.y; r2.z <- n.z
mov r3.x, r0.x  // r3.x <- p.x
mov r3.y, r0.y  // r3.y <- p.y
mov r3.z, r0.z  // r3.z <- p.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.w, r1.w, l(4)
  breakc_z r2.w

#line 12
  dp4 r2.w, v4.xyzw, icb[r1.w + 0].xyzw
  and r4.xyzw, v5.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r3.w, r4.y, r4.x
  imul null, r3.w, r3.w, l(4)
  mul r4.xyz, v0.xxxx, cb1[r3.w + 0].xyzx
  mul r5.xyz, v0.yyyy, cb1[r3.w + 1].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r5.xyz, v0.zzzz, cb1[r3.w + 2].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r3.xyz, r4.xyzx, r3.xyzx

#line 13
  dp4 r2.w, v4.xyzw, icb[r1.w + 0].xyzw
  itof r3.w, l(0)
  and r4.xyzw, v5.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r4.x, r4.y, r4.x
  imul null, r4.x, r4.x, l(4)
  mul r4.yzw, v1.xxxx, cb1[r4.x + 0].xxyz
  mul r5.xyz, v1.yyyy, cb1[r4.x + 1].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, v1.zzzz, cb1[r4.x + 2].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, r3.wwww, cb1[r4.x + 3].xyzx
  add r4.xyz, r4.yzwy, r5.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r2.xyz, r2.xyzx, r4.xyzx

#line 14
  iadd r1.w, r1.w, l(1)
endloop 

#line 18
mul r0.xyzw, r3.xxxx, cb0[0].xyzw
mul r1.xyzw, r3.yyyy, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, r3.zzzz, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- output.Position.x; r0.y <- output.Position.y; r0.z <- output.Position.z; r0.w <- output.Position.w

#line 20
mov r3.x, r3.x  // r3.x <- wPos.x
mov r3.y, r3.y  // r3.y <- wPos.y
mov r3.z, r3.z  // r3.z <- wPos.z

#line 22
mov r2.xyz, r2.xyzx  // r2.x <- wN.x; r2.y <- wN.y; r2.z <- wN.z

#line 25
mov r2.xyz, r2.xyzx  // r2.x <- vN.x; r2.y <- vN.y; r2.z <- vN.z

#line 26
itof r1.yz, l(0, 0, 1, 0)  // r1.y <- vB.x; r1.z <- vB.y
mov r1.x, l(0.001000)  // r1.x <- vB.z

#line 28
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx

#line 29
mul r4.xyz, r2.zxyz, r1.zxyz
mul r1.xyz, r2.yzxy, r1.xyzx
mov r1.xyz, -r1.xyzx
add r1.xyz, r1.xyzx, r4.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- vT.x; r1.y <- vT.y; r1.z <- vT.z

#line 30
mul r4.xyz, r1.zxyz, r2.yzxy
mul r5.xyz, r1.yzxy, r2.zxyz
mov r5.xyz, -r5.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx  // r4.x <- vB.x; r4.y <- vB.y; r4.z <- vB.z

#line 33
mov r5.xyzw, v3.xyzw  // r5.x <- output.Color.x; r5.y <- output.Color.y; r5.z <- output.Color.z; r5.w <- output.Color.w

#line 36
mov r1.xyz, r1.xyzx  // r1.x <- output.vT.x; r1.y <- output.vT.y; r1.z <- output.vT.z

#line 37
mov r4.xyz, r4.xyzx  // r4.x <- output.vB.x; r4.y <- output.vB.y; r4.z <- output.vB.z

#line 38
mov r6.xyz, r2.xyzx  // r6.x <- output.vN.x; r6.y <- output.vN.y; r6.z <- output.vN.z

#line 41
mov r7.xy, v2.xyxx  // r7.x <- output.Tex.x; r7.y <- output.Tex.y

#line 42
mov r2.xyz, r2.xyzx  // r2.x <- output.wNormal.x; r2.y <- output.wNormal.y; r2.z <- output.wNormal.z

#line 43
mov r3.xyz, r3.xyzx  // r3.x <- output.wPosition.x; r3.y <- output.wPosition.y; r3.z <- output.wPosition.z

#line 45
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r5.xyzw
mov o2.xyz, r2.xyzx
mov o3.xyz, r3.xyzx
mov o5.xyz, r1.xyzx
mov o6.xyz, r4.xyzx
mov o7.xyz, r6.xyzx
mov o4.xy, r7.xyxx
ret 
// Approximately 87 instruction slots used
