//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
// TEXCOORD                 3   xyzw        5     NONE   float   xyzw
// TEXCOORD                 4   xyzw        6     NONE   float   xyzw
// TEXCOORD                 5   xyzw        7     NONE   float   xyzw
// TEXCOORD                 6   xyzw        8     NONE   float   xyzw
// TEXCOORD                 7   xyzw        9     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_input v0.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_temps 11
//
// Initial variable locations:
//   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; 
//   v1.x <- input.color.x; v1.y <- input.color.y; v1.z <- input.color.z; v1.w <- input.color.w; 
//   v2.x <- input.tex.x; v2.y <- input.tex.y; 
//   v3.x <- input.normal.x; v3.y <- input.normal.y; v3.z <- input.normal.z; 
//   o9.x <- <main return value>.tex7.x; o9.y <- <main return value>.tex7.y; o9.z <- <main return value>.tex7.z; o9.w <- <main return value>.tex7.w; 
//   o8.x <- <main return value>.tex6.x; o8.y <- <main return value>.tex6.y; o8.z <- <main return value>.tex6.z; o8.w <- <main return value>.tex6.w; 
//   o7.x <- <main return value>.tex5.x; o7.y <- <main return value>.tex5.y; o7.z <- <main return value>.tex5.z; o7.w <- <main return value>.tex5.w; 
//   o6.x <- <main return value>.tex4.x; o6.y <- <main return value>.tex4.y; o6.z <- <main return value>.tex4.z; o6.w <- <main return value>.tex4.w; 
//   o5.x <- <main return value>.tex3.x; o5.y <- <main return value>.tex3.y; o5.z <- <main return value>.tex3.z; o5.w <- <main return value>.tex3.w; 
//   o4.x <- <main return value>.tex2.x; o4.y <- <main return value>.tex2.y; o4.z <- <main return value>.tex2.z; o4.w <- <main return value>.tex2.w; 
//   o3.x <- <main return value>.tex1.x; o3.y <- <main return value>.tex1.y; o3.z <- <main return value>.tex1.z; o3.w <- <main return value>.tex1.w; 
//   o2.x <- <main return value>.tex0.x; o2.y <- <main return value>.tex0.y; o2.z <- <main return value>.tex0.z; o2.w <- <main return value>.tex0.w; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 5 "E:\就職作品\ライブラリ\Game\HLSL\GaussianYBlur_vs.hlsl"
itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- output.color.x; r0.y <- output.color.y; r0.z <- output.color.z; r0.w <- output.color.w

#line 8
mov r1.xyz, v0.xyzx  // r1.x <- output.position.x; r1.y <- output.position.y; r1.z <- output.position.z
mov r1.w, l(1.000000)  // r1.w <- output.position.w

#line 9
mov r2.xyzw, v2.xyxy  // r2.z <- tex.x; r2.w <- tex.y

#line 16
itof r3.x, l(512)  // r3.x <- height

#line 19
mov r3.x, r3.x  // r3.x <- tex_size.y

#line 22
div r4.y, l(1.000000), r3.x  // r4.y <- output.tex0.y
mov r4.x, l(0)  // r4.x <- output.tex0.x

#line 25
div r5.y, l(3.000000), r3.x  // r5.y <- output.tex1.y
mov r5.x, l(0)  // r5.x <- output.tex1.x

#line 28
div r6.y, l(5.000000), r3.x  // r6.y <- output.tex2.y
mov r6.x, l(0)  // r6.x <- output.tex2.x

#line 31
div r7.y, l(7.000000), r3.x  // r7.y <- output.tex3.y
mov r7.x, l(0)  // r7.x <- output.tex3.x

#line 34
div r8.y, l(9.000000), r3.x  // r8.y <- output.tex4.y
mov r8.x, l(0)  // r8.x <- output.tex4.x

#line 37
div r9.y, l(11.000000), r3.x  // r9.y <- output.tex5.y
mov r9.x, l(0)  // r9.x <- output.tex5.x

#line 40
div r10.y, l(13.000000), r3.x  // r10.y <- output.tex6.y
mov r10.x, l(0)  // r10.x <- output.tex6.x

#line 43
div r3.y, l(15.000000), r3.x  // r3.y <- output.tex7.y
mov r3.x, l(0)  // r3.x <- output.tex7.x

#line 46
mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)  // r4.z <- output.tex0.z; r4.w <- output.tex0.w

#line 47
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)  // r5.z <- output.tex1.z; r5.w <- output.tex1.w

#line 48
mul r6.zw, r6.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)  // r6.z <- output.tex2.z; r6.w <- output.tex2.w

#line 49
mul r7.zw, r7.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)  // r7.z <- output.tex3.z; r7.w <- output.tex3.w

#line 50
mul r8.zw, r8.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)  // r8.z <- output.tex4.z; r8.w <- output.tex4.w

#line 51
mul r9.zw, r9.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)  // r9.z <- output.tex5.z; r9.w <- output.tex5.w

#line 52
mul r10.zw, r10.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)  // r10.z <- output.tex6.z; r10.w <- output.tex6.w

#line 53
mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)  // r3.z <- output.tex7.z; r3.w <- output.tex7.w

#line 56
add r4.xyzw, r2.xyzw, r4.xyzw

#line 57
add r5.xyzw, r2.xyzw, r5.xyzw

#line 58
add r6.xyzw, r2.xyzw, r6.xyzw

#line 59
add r7.xyzw, r2.xyzw, r7.xyzw

#line 60
add r8.xyzw, r2.xyzw, r8.xyzw

#line 61
add r9.xyzw, r2.xyzw, r9.xyzw

#line 62
add r10.xyzw, r2.xyzw, r10.xyzw

#line 63
add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- output.tex7.x; r2.y <- output.tex7.y; r2.z <- output.tex7.z; r2.w <- output.tex7.w

#line 66
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r0.xyzw
mov o2.xyzw, r4.xyzw
mov o3.xyzw, r5.xyzw
mov o4.xyzw, r6.xyzw
mov o5.xyzw, r7.xyzw
mov o6.xyzw, r8.xyzw
mov o7.xyzw, r9.xyzw
mov o8.xyzw, r10.xyzw
mov o9.xyzw, r2.xyzw
ret 
// Approximately 49 instruction slots used
